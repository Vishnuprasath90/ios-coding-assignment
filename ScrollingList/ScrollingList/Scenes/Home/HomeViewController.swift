//
//  HomeViewController.swift
//  ScrollingList
//
//  Created by Vishnu Prasath on 17/05/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SkeletonView
import SwiftUI

protocol HomeDisplayLogic: AnyObject {
    func displayViewModelData(viewModel: Home.SearchTerm.ViewModel)
    func displayAPIError()
}

class HomeViewController: UIViewController, HomeDisplayLogic {
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        makeRequest()
    }
    
    // MARK: Do something
    @IBOutlet weak var tableView: UITableView!{
        didSet {
            tableView.rowHeight = UITableView.automaticDimension
            tableView.estimatedRowHeight = 44.0
            tableView.isSkeletonable = true
        }
    }
    
    private let standardHeight: CGFloat = 430
    private let compressedHeight: CGFloat = 150
    private var cellDisplays: [DisplayInterface]?
    private var isDummyVisible: Bool = false
    private var isLoading = false
    
    func makeRequest() {
        let request = Home.SearchTerm.Request(searchString: "NYC")
        interactor?.newSearchRequest(request: request)
        isDummyVisible = true
        tableView.reloadData()
    }
    
    func displayViewModelData(viewModel: Home.SearchTerm.ViewModel) {
        cellDisplays = viewModel.businessDisplays
        view.hideSkeleton()
        isDummyVisible = false
        isLoading = false
        tableView.reloadData()
    }
    
    func displayAPIError() {
      let alert = UIAlertController(title: "ERROR", message: "Something went wrong. Please check your connection", preferredStyle: .alert)
      let action = UIAlertAction(title: "Ok", style: .default) { _ in
        alert.dismiss(animated: true)
      }
      alert.addAction(action)
      self.present(alert, animated: true)
    }
}

extension HomeViewController: SkeletonTableViewDataSource {
  func numberOfSections(in tableView: UITableView) -> Int {
    return (self.interactor as? TableViewPresentLogic)?.numberOfSections() ?? 1
  }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return (self.interactor as? TableViewPresentLogic)?.numberOfRows(section) ?? (isDummyVisible ? 1 : 0)
    }
    
    func collectionSkeletonView(_ skeletonView: UITableView, cellIdentifierForRowAt indexPath: IndexPath) -> ReusableCellIdentifier {
        return MonoBusinessCell.identifier
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
      guard let cellData = cellDisplays?[indexPath.section] as? Home.SearchTerm.ViewModel.BusinessDirectory,
              let infos = (self.interactor as? TableViewPresentLogic)?.modelForCell(indexPath)  else {
            let cell = tableView.dequeueReusableCell(withIdentifier: MonoBusinessCell.identifier) as! MonoBusinessCell
            cell.showAnimatedSkeleton(transition: .crossDissolve(0.25))
            return cell
        }
      switch cellData.displayType {
        case .monoDisplay:
            let cell = tableView.dequeueReusableCell(withIdentifier: MonoBusinessCell.identifier) as! MonoBusinessCell
            cell.configure(model: infos)
            return cell
        case .dualDisplay:
        let cell = tableView.dequeueReusableCell(withIdentifier: DualBusinessCell.identifier) as! DualBusinessCell
        cell.configure(model: infos)
        return cell
      }
    }
    
  func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
      return 44.0
  }
  
  func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
    return (cellDisplays?[section] as? Home.SearchTerm.ViewModel.BusinessDirectory)?.businessKey ?? ""
  }
  
  func tableView(_ tableView: UITableView, willDisplayHeaderView view: UIView, forSection section: Int) {
      if let confirmedHeaderView = view as? UITableViewHeaderFooterView {
          confirmedHeaderView.textLabel?.text = (cellDisplays?[section] as? Home.SearchTerm.ViewModel.BusinessDirectory)?.businessKey ?? ""
      }
  }
}
