//
//  HomePresenter.swift
//  ScrollingList
//
//  Created by Vishnu Prasath on 17/05/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomePresentationLogic {
  func presentResponse(response: Home.SearchTerm.Response)
  func presentAPIError()
}

protocol TableViewPresentLogic {
  func numberOfSections() -> Int
  func numberOfRows(_ section: Int) -> Int
  func modelForCell(_ indexPath: IndexPath) -> CellModel?
  func titleForHeaderInSection(_  section: Int) -> String?
}

class HomePresenter: HomePresentationLogic {
   
  weak var viewController: HomeDisplayLogic?
  var interfaces: [DisplayInterface]?
  
  // MARK: Do something
  
  func presentResponse(response: Home.SearchTerm.Response) {
    guard let businesses = response.business else { return }
    var viewModels = [DisplayInterface]()
    let grouped = Dictionary(grouping: businesses, by: { $0.name?.first })
    var isMono = true
    
    for value in grouped.keys {
      guard let key = value else { return }
      if isMono, let groupedInfo = grouped[value], let first = groupedInfo.first {
        let info = Home.SearchTerm.ViewModel.BusinessDisplay(displayType: .monoDisplay, name: first.name, thumbnail: first.thumbnail)
        let model = Home.SearchTerm.ViewModel.BusinessDirectory(displayType: .monoDisplay, businessKey: String(key), businessInfos: [info])
        viewModels.append(model)
        isMono.toggle()
      } else if !isMono, let groupedInfo = grouped[value], groupedInfo.count > 1 {
        let first = Home.SearchTerm.ViewModel.BusinessDisplay(displayType: .dualDisplay, name: groupedInfo.first?.name, thumbnail: groupedInfo.first?.thumbnail)
        let last = Home.SearchTerm.ViewModel.BusinessDisplay(displayType: .dualDisplay, name: groupedInfo.last?.name, thumbnail: groupedInfo.last?.thumbnail)
        let infos = [first, last]
        let model = Home.SearchTerm.ViewModel.BusinessDirectory(displayType: .dualDisplay, businessKey: String(key), businessInfos: infos)
        viewModels.append(model)
        isMono.toggle()
      }
      
    }
    interfaces = viewModels
    let viewModel = Home.SearchTerm.ViewModel(businessDisplays: viewModels)
    viewController?.displayViewModelData(viewModel: viewModel)
  }
    
    func presentAPIError() {
        viewController?.displayAPIError()
    }
    
}

extension HomePresenter: TableViewPresentLogic {
  func numberOfSections() -> Int {
    interfaces?.count ?? 1
  }
  
  func numberOfRows(_ section: Int) -> Int {
    1
  }
  
  func modelForCell(_ indexPath: IndexPath) -> CellModel? {
    guard let cellData = interfaces?[indexPath.section] as? Home.SearchTerm.ViewModel.BusinessDirectory, let infos = cellData.businessInfos as? [Home.SearchTerm.ViewModel.BusinessDisplay]  else {
          return nil
      }
    let model = BusinessCellModel(displayData: infos)
    return model
  }
  
  func titleForHeaderInSection(_ section: Int) -> String? {
    (interfaces?[section] as? Home.SearchTerm.ViewModel.BusinessDirectory)?.businessKey ?? ""
  }
  
  
}
